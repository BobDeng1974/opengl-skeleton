
// Rendering
Texture Mapping
Normal Mapping
Single Light
Materials (Ambient, Specular, Diffuse)
Gourand Shading
Phong Shading
Blinn-Phong Shading
Reflection
Refraction
Shadow Mapping
Bump Mapping
Cel-Shading (https://en.wikipedia.org/wiki/Cel_shading)
Bill Boarding
Gamma Correction (https://en.wikipedia.org/wiki/Gamma_correction)
http://www.pxleyes.com/blog/wp-content/uploads/2010/05/mat-shaders.jpg
http://www.pxleyes.com/blog/2010/05/introduction-to-3ds-max-materials/
https://en.wikipedia.org/wiki/Oren%E2%80%93Nayar_reflectance_model
https://en.wikipedia.org/wiki/Minnaert_function
https://en.wikipedia.org/wiki/Lambertian_reflectance
https://en.wikipedia.org/wiki/Specular_highlight#Cook.E2.80.93Torrance_model

Frenel Effect

Albedo Effect

http://www.scratchapixel.com/index.php?nocategory

// Model Loading &amp; Animation
MD5 Model Loading
MD5 Model Animation
MD5 Model Animation SLerping between positions/animations

== References ==
Tutorials:
https://www.youtube.com/watch?v=Y_vvC2G7vRo&amp;list=PLEETnX-uPtBUbVOok816vTl1K9vV1GgH5&amp;index=1

Books:
OpenGL Superbible (7th Ed)
OpenGL Programming Guide (8th Ed)
Real-Time Rendering (3rd Ed)

https://www.opengl.org/discussion_boards/showthread.php/163056-Doom-3-lighting-shader
:
varying vec3 Specular_Light_Vector; //fragment.texcoord[6]
varying vec3 Diffuse_Light_Vector; //fragment.texcoord[0]
varying vec2 Normal_Texture_Coordinate; //fragment.texcoord[1]
varying vec2 Light_Projection_Vector; //fragment.texcoord[3]
varying vec2 Light_Falloff_Vector; //fragment.texcoord[2]
varying vec2 Diffuse_Texture_Coordinate; //fragment.texcoord[4]
varying vec2 Sepcular_Texture_Coordinate; //fragment.texcoord[5]

uniform samplerCube Normalization_Cube_Map;
uniform sampler2D Bump_Map;
uniform sampler2D Diffuse_Map;
uniform sampler2D Specular_Map;
uniform sampler2D Light_Falloff_Map;
uniform sampler2D Light_Projection_Map;
uniform sampler2D Specular_Lockup;

uniform vec4 Diffuse_Modifier; //env[0]
uniform vec4 Specular_Modifier; //env[1]

void main()
{
vec3 specular_vec = normalize(Specular_Light_Vector);

vec3 diffuse_vec = textureCube(Normalization_Cube_Map, Diffuse_Light_Vector) * 2.0 - 1.0;

vec3 local_normal = texture2D(Bump_Map, Normal_Texture_Coordinate) * 2.0 - 1.0;
local_normal.x = local_normal.a;

vec4 diffuse = dot(diffuse_vec, local_normal) * texture2DProj(Light_Projection_Map, Light_Projection_Vector) * texture2DProj(Light_Falloff_Map, Light_Falloff_Vector);

vec4 diffuse_color = texture2D(Diffuse_Map, Diffuse_Texture_Coordinate) * Diffue_Modifier;
vec4 specular_color = texture2D(Specular_Map, Specular_Texture_Coordinate) * 2;

vec4 specular = texture2D(vec2(dot(specular_vec, local_normal)), Sepcular_Texture_Coordinate) * Specular_Modifier;

gl_FragColor = (specular * specular_color + diffuse_color) * diffuse * gl_Color;
}

Mancubus Goal:
https://www.youtube.com/watch?v=cfVPW3u278A